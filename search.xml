<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spider_BQG</title>
      <link href="2021/01/11/Spider-BQG/"/>
      <url>2021/01/11/Spider-BQG/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_content</span>(<span class="hljs-params">target</span>):</span><br>    req = requests.get(url=target)<br>    req.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    html = req.text<br>    bf = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    texts = bf.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>)<br>    content = texts.text.strip().split(<span class="hljs-string">&#x27;\xa0&#x27;</span> * <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">spider</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, book_name, target</span>):</span><br>        self.__book_name = book_name<br>        self.__target = target<br>        self.__server = <span class="hljs-string">&#x27;https://www.xsbiquge.com&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_project</span>(<span class="hljs-params">self</span>):</span><br>        req = requests.get(url=self.__target)<br>        req.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>        html = req.text<br>        chapter_bs = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        chapters = chapter_bs.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;list&#x27;</span>)<br>        chapters = chapters.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-keyword">for</span> chapter <span class="hljs-keyword">in</span> tqdm(chapters):<br>            chapter_name = chapter.string<br>            url = self.__server + chapter.get(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            content = get_content(url)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self.__book_name, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(chapter_name)<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span>.join(content))<br>                f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    spider1 = spider(<span class="hljs-string">&quot;book_name.txt&quot;</span>, <span class="hljs-string">&quot;https://www.xsbiquge.com/88_88080/&quot;</span>)<br>    spider1.do_project()<br>    print(<span class="hljs-string">&quot;运行结束&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bs4 </tag>
            
            <tag> python </tag>
            
            <tag> re </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider</title>
      <link href="2021/01/01/Spider/"/>
      <url>2021/01/01/Spider/</url>
      
        <content type="html"><![CDATA[<h1 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h1><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p>终端打开scripts根目录，’.\pip install ***’安装库</p><p>常用库: bs4 re urllib xlwt sqlite3</p><h2 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*-codeing:utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> bs4  <span class="hljs-comment">#网页解析、获取数据</span><br><span class="hljs-keyword">import</span> re  <span class="hljs-comment">#正则表达式</span><br><span class="hljs-keyword">import</span> urllib.request, urllib.error  <span class="hljs-comment">#指定url、获取网页数据</span><br><span class="hljs-keyword">import</span> xlwt  <span class="hljs-comment">#进行excel操作</span><br><span class="hljs-keyword">import</span> sqlite3  <span class="hljs-comment">#进行sqlit数据库操作</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aom</span>():</span><br>    print(<span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    aom()<br></code></pre></td></tr></table></figure><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>baseurl=”<a href="https://movie.douban.com/top250?start=0&filter=">https://movie.douban.com/top250?start=0&amp;filter=</a>“</p><p><a href="https://movie.douban.com/top250?start=0&filter=">豆瓣电影 Top 250</a></p><p>savepath=”E:/py/douban.xls”</p><ol><li><p>爬取网页</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">datalist=GetData(baseurl)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetData</span>(<span class="hljs-params">baseurl</span>):</span><br><span class="hljs-built_in">list</span>=[]<br><span class="hljs-comment">#逐一解析</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure></li><li><p>解析数据</p></li><li><p>保存数据</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">SaveData</span>(<span class="hljs-params">savepath</span>)</span><br></code></pre></td></tr></table></figure><h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">AskUrl</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-comment">#head用于伪装、向服务端发消息</span><br>    head = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span><br>    &#125;<br>    request = urllib.request.Request(url, headers=head)<br>    html = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        response = urllib.request.urlopen(request)<br>        html = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        print(html)<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;code&quot;</span>):<br>            print(e.code)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;reason&quot;</span>):<br>            print(e.reason)<br>    <span class="hljs-keyword">return</span> html<br></code></pre></td></tr></table></figure><h1 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h1><h2 id="补充bs4"><a href="#补充bs4" class="headerlink" title="补充bs4"></a>补充bs4</h2><p>bs4将Html文档转换成一个复杂的树形结构，每个节点都是python对象，所有对象可以归纳为4种</p><ol><li><p>-Tag</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read()<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-comment">#会把第一个标签打印出来</span><br><br>print(bs.title)<br>print(bs.a)<br>print(bs.link)<br>print(<span class="hljs-built_in">type</span>(bs.link))<br></code></pre></td></tr></table></figure><p> 会拿到第一个标签</p></li><li><p>-NavigableString</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read()<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>print(bs.title.string)<br>print(<span class="hljs-built_in">type</span>(bs.title.string))<br></code></pre></td></tr></table></figure><p> 上面的会打印注释</p><p> 下面会打印出字典</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read()<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>print(bs.a.attrs)<br>print(<span class="hljs-built_in">type</span>(bs.a.attrs))<br></code></pre></td></tr></table></figure></li><li><p>-BeautifulSoup</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read()<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>print(bs)<br></code></pre></td></tr></table></figure></li><li><p>-comment</p><p> 第一种打印出注释就是comment</p></li></ol><h2 id="节点的获取"><a href="#节点的获取" class="headerlink" title="节点的获取"></a>节点的获取</h2><h3 id="文档的遍历"><a href="#文档的遍历" class="headerlink" title="文档的遍历"></a>文档的遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read()<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>print(bs.head.contents[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>contents是个列表，可以通过下标访问元素</p><h3 id="文档的搜索"><a href="#文档的搜索" class="headerlink" title="文档的搜索"></a>文档的搜索</h3><ol><li><p>find_all—字符串过滤、会查找与字符串完全一致的标签</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>t_list = bs.find_all(<span class="hljs-string">&quot;a&quot;</span>)<br>print(t_list)<br></code></pre></td></tr></table></figure><ol><li><p>正则表达式搜索、使用search()方法搜索、把包含a的都拿出来</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>t_list = bs.find_all(re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;a&quot;</span>))<br>print(t_list)<br></code></pre></td></tr></table></figure></li><li><p>方法：传入一个函数，根据函数的要求来搜索</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_name_exist</span>(<span class="hljs-params">tag</span>):</span><br>    <span class="hljs-keyword">return</span> tag.<span class="hljs-built_in">hasattr</span>(<span class="hljs-string">&quot;name&quot;</span>)<br><br>t_list = bs.find_all(is_name_exist)<br><br>print(t_list)<br></code></pre></td></tr></table></figure></li></ol></li><li><p>kwargs_____参数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:\\baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>html = f.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>bs = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>t_list = bs.find_all(<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;head&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="补充正则表达式"><a href="#补充正则表达式" class="headerlink" title="补充正则表达式"></a>补充正则表达式</h2></li></ol><p><a href="https://www.bilibili.com/video/BV12E411A7ZQ?p=22"></a></p><p><a href="https://www.cnblogs.com/dreamingbaobei/p/9717234.html">史上最全常用正则表达式大全</a></p><p><a href="Spider%2074d04c2785984ec0a50e036a4a41e102/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6%206ef815be95ee46bc90e8b2a4e93d312b.csv">常用操作符</a></p><p><a href="Spider%2074d04c2785984ec0a50e036a4a41e102/Re%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%20bc8815fda34b42e083b77b30d2b77a90.csv">Re库的使用</a></p><p><a href="Spider%2074d04c2785984ec0a50e036a4a41e102/Re%E5%BA%93%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6%20fe84e1a330d64ec7b0aa3f61523264c1.csv">Re库的修饰符</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>pat = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;AA&quot;</span>)  <span class="hljs-comment">#此处AA是正则表达式</span><br>m = pat.search(<span class="hljs-string">&quot;ABCFFFAA&quot;</span>)  <span class="hljs-comment">#被匹配的</span><br>print(m) <span class="hljs-comment">#左闭右开</span><br></code></pre></td></tr></table></figure><p>上面的search只会找到第一个匹配的串，下面是第二种写法，前面是正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>print(re.search(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;fsaa&quot;</span>))<br></code></pre></td></tr></table></figure><p>下面是findall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>print(re.findall(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;faasaa&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>print(re.findall(<span class="hljs-string">&quot;[A-Z]&quot;</span>, <span class="hljs-string">&quot;faCasBaaAA&quot;</span>))<br></code></pre></td></tr></table></figure><p>sub的使用，在第三个字符串中，用第二个字符替换掉第一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>print(re.sub(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;asdfagfsg&quot;</span>))<br></code></pre></td></tr></table></figure><p>建议在正则表达式前面加上r，不用担心转义字符的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>print(re.sub(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">r&quot;/A/&quot;</span>, <span class="hljs-string">&quot;asdfagfsg&quot;</span>))  <br></code></pre></td></tr></table></figure><h2 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h2><p><a href="https://www.bilibili.com/video/BV12E411A7ZQ?t=7&p=23"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">findlink = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="hljs-comment">#创建正则表达式对象、表示规则字符串的模式</span><br>findImgsrc = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)<br>findMovieName = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findScore = re.<span class="hljs-built_in">compile</span>(<br>    <span class="hljs-string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findIformation = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findDitail = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*)&lt;/p&gt;&#x27;</span>, re.S)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetData</span>(<span class="hljs-params">baseurl</span>):</span><br>    datalist = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>        url = baseurl + <span class="hljs-built_in">str</span>(i)<br>        html = AskUrl(url)  <span class="hljs-comment">#保存</span><br>        <span class="hljs-comment">#解析</span><br>        soup = bs4.BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&quot;item&quot;</span>):<br>            <span class="hljs-comment">#print(item)  #下面是保存</span><br>            <span class="hljs-comment">#break</span><br>            data = []<br>            item = <span class="hljs-built_in">str</span>(item)<br>            link = re.findall(findlink, item)[<span class="hljs-number">0</span>]  <span class="hljs-comment">#通过正则表达式查找字符串,0表示两个里面的第一个</span><br>            <span class="hljs-comment">#print(link)</span><br>            img = re.findall(findImgsrc, item)[<span class="hljs-number">0</span>]<br>            <span class="hljs-comment">#print(img)</span><br>            name = re.findall(findMovieName, item)[<span class="hljs-number">0</span>]<br>            <span class="hljs-comment">#print(name)</span><br>            score = re.findall(findScore, item)[<span class="hljs-number">0</span>]<br>            print(score)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> datalist<br></code></pre></td></tr></table></figure><h2 id="标签解析"><a href="#标签解析" class="headerlink" title="标签解析"></a>标签解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetData</span>(<span class="hljs-params">baseurl</span>):</span><br>    datalist = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>):<br>        url = baseurl + <span class="hljs-built_in">str</span>(i)<br>        html = AskUrl(url)  <span class="hljs-comment">#保存</span><br>        <span class="hljs-comment">#解析</span><br>        soup = bs4.BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&quot;item&quot;</span>):<br>            <span class="hljs-comment">#print(item)  #下面是保存</span><br>            <span class="hljs-comment">#break</span><br>            data = []<br>            item = <span class="hljs-built_in">str</span>(item)<br>            link = re.findall(findlink, item)[<span class="hljs-number">0</span>]  <span class="hljs-comment">#通过正则表达式查找字符串,0表示两个里面的第一个</span><br>            data.append(link)<br>            <span class="hljs-comment">#print(link)</span><br>            img = re.findall(findImgsrc, item)[<span class="hljs-number">0</span>]<br>            data.append(img)<br>            <span class="hljs-comment">#print(img)</span><br>            name = re.findall(findMovieName, item)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(name) == <span class="hljs-number">2</span>):<br>                ctitle = name[<span class="hljs-number">0</span>]<br>                data.append(ctitle)<br>                otitle = name[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\xa0/\xa0&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-comment">#print(otitle)</span><br>                data.append(otitle)<br>            <span class="hljs-keyword">else</span>:<br>                data.append(name[<span class="hljs-number">0</span>])<br>                data.append(<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-comment">#print(name)</span><br>            score = re.findall(findScore, item)[<span class="hljs-number">0</span>]<br>            data.append(score)<br>            <span class="hljs-comment">#print(score)</span><br>            information = re.findall(findIformation, item)[<span class="hljs-number">0</span>]<br>            data.append(information.replace(<span class="hljs-string">&quot;。&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br><br>            datalist.append(data)<br>            print(datalist)<br>    <span class="hljs-keyword">return</span> datalist<br></code></pre></td></tr></table></figure><h1 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h1><h2 id="保存到excel中"><a href="#保存到excel中" class="headerlink" title="保存到excel中"></a>保存到excel中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlwt<br>wookbook = xlwt.Workbook()<br>wooksheet = wookbook.add_sheet(<span class="hljs-string">&quot;sheet1&quot;</span>)<br>wooksheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Hello&quot;</span>)<br>wookbook.save(<span class="hljs-string">&quot;text.xls&quot;</span>)<br></code></pre></td></tr></table></figure><p>下面是九九乘法表，示例python的xlwt的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlwt<br>wookbook = xlwt.Workbook()<br>wooksheet = wookbook.add_sheet(<span class="hljs-string">&quot;sheet1&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i + <span class="hljs-number">1</span>):<br>        wooksheet.write(i, j, <span class="hljs-string">&quot;%d*%d=%d&quot;</span> % (i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>, (j + <span class="hljs-number">1</span>) * (i + <span class="hljs-number">1</span>)))<br>wookbook.save(<span class="hljs-string">&quot;1.xls&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*-codeing:utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> bs4  <span class="hljs-comment">#网页解析、获取数据</span><br><span class="hljs-keyword">import</span> re  <span class="hljs-comment">#正则表达式</span><br><span class="hljs-keyword">import</span> urllib.request, urllib.error  <span class="hljs-comment">#指定url、获取网页数据</span><br><span class="hljs-keyword">import</span> xlwt  <span class="hljs-comment">#进行excel操作</span><br><span class="hljs-keyword">import</span> sqlite3  <span class="hljs-comment">#进行sqlit数据库操作</span><br><br>baseurl = <span class="hljs-string">&quot;https://movie.douban.com/top250?start=&quot;</span><br><br>datalist = []<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    GetData(baseurl)<br>    SaveData(datalist)<br><br>findlink = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="hljs-comment">#创建正则表达式对象、表示规则字符串的模式</span><br>findImgsrc = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)<br>findMovieName = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findScore = re.<span class="hljs-built_in">compile</span>(<br>    <span class="hljs-string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findIformation = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetData</span>(<span class="hljs-params">baseurl</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):<br>        url = baseurl + <span class="hljs-built_in">str</span>(i)<br>        html = AskUrl(url)  <span class="hljs-comment">#保存</span><br>        <span class="hljs-comment">#解析</span><br>        soup = bs4.BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&quot;item&quot;</span>):<br>            <span class="hljs-comment">#print(item)  #下面是保存</span><br>            <span class="hljs-comment">#break</span><br>            data = []<br>            item = <span class="hljs-built_in">str</span>(item)<br>            link = re.findall(findlink, item)[<span class="hljs-number">0</span>]  <span class="hljs-comment">#通过正则表达式查找字符串,0表示两个里面的第一个</span><br>            data.append(link)<br>            <span class="hljs-comment">#print(link)</span><br>            img = re.findall(findImgsrc, item)[<span class="hljs-number">0</span>]<br>            data.append(img)<br>            <span class="hljs-comment">#print(img)</span><br>            name = re.findall(findMovieName, item)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(name) == <span class="hljs-number">2</span>):<br>                ctitle = name[<span class="hljs-number">0</span>]<br>                data.append(ctitle)<br>                otitle = name[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\xa0/\xa0&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-comment">#print(otitle)</span><br>                data.append(otitle)<br>            <span class="hljs-keyword">else</span>:<br>                data.append(name[<span class="hljs-number">0</span>])<br>                data.append(<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-comment">#print(name)</span><br>            score = re.findall(findScore, item)[<span class="hljs-number">0</span>]<br>            data.append(score)<br>            <span class="hljs-comment">#print(score)</span><br>            information = re.findall(findIformation, item)[<span class="hljs-number">0</span>]<br>            data.append(information.replace(<span class="hljs-string">&quot;。&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br><br>            datalist.append(data)<br>            <span class="hljs-comment">#print(datalist)</span><br>    <span class="hljs-keyword">return</span> datalist<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">AskUrl</span>(<span class="hljs-params">url</span>):</span><br>    <span class="hljs-comment">#head用于伪装、向服务端发消息</span><br>    head = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<br>        <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span><br>    &#125;<br>    request = urllib.request.Request(url, headers=head)<br>    html = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        response = urllib.request.urlopen(request)<br>        html = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment">#print(html)</span><br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;code&quot;</span>):<br>            print(e.code)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;reason&quot;</span>):<br>            print(e.reason)<br>    <span class="hljs-keyword">return</span> html<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">SaveData</span>(<span class="hljs-params">datalist</span>):</span><br>    wookbook = xlwt.Workbook(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment">#创建</span><br>    wooksheet = wookbook.add_sheet(<span class="hljs-string">&quot;sheet1&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">250</span>):<br>        print(<span class="hljs-string">&quot;第%d条&quot;</span> % (i + <span class="hljs-number">1</span>))<br>        data = datalist[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>):<br>            wooksheet.write(i, j, data[j])<br>    wookbook.save(<span class="hljs-string">&quot;douban.xls&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="SQlite部分"><a href="#SQlite部分" class="headerlink" title="SQlite部分"></a>SQlite部分</h1><p>结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">**<span class="hljs-keyword">import</span> sqlite3<br>conn = sqlite3.connect(<span class="hljs-string">&quot;test.db&quot;</span>)<br>print(<span class="hljs-string">&quot;Successfully open&quot;</span>)<br>c = conn.cursor()<br>sql = <span class="hljs-string">&quot;&quot;</span><br>c.execute(sql)<br>conn.commit()<br>conn.close()<br>print(<span class="hljs-string">&quot;Successfully create&quot;</span>)**<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bs4 </tag>
            
            <tag> urllib </tag>
            
            <tag> python </tag>
            
            <tag> re </tag>
            
            <tag> xlwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何拥有一个hexo博客</title>
      <link href="2020/01/29/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E4%B8%80%E4%B8%AAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/01/29/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E4%B8%80%E4%B8%AAhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="如何拥有一个hexo博客"><a href="#如何拥有一个hexo博客" class="headerlink" title="如何拥有一个hexo博客"></a>如何拥有一个<em>hexo</em>博客</h1><p><strong>Hexo 是一个快速、简洁且高效的博客框架。</strong></p><p>Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。一般我们可以使用github pages提供的免费服务器</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>安装<a href="https://nodejs.org/en/">Node.js</a>-&gt;打开cmd，输入node -v和npm -v，都出现版本号就表示安装成功</p><blockquote><p>Node.js是一个JavaScript的运行环境，使电脑能够成功运行hexo</p></blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>安装<a href="https://git-scm.com/">Git</a>-&gt;这里是教程<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">&gt;_&lt;</a></p><blockquote><p>Git可以让我们向GitHub pages上传我们的博客</p></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>必备应用安装完成后，就可以动手使用npm安装hexo啦！打开cmd，输入以下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装完成再输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure><p>出现版本号表示成功</p><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>在GitHub的your repository中新建一个名为GitHub用户名.github.io 的repository</p><p>新建完成点开clone or download压缩包到本地-&gt;解压并且放置在一个自己新建的文件夹中，这个文件夹就是你的博客存储的位置-&gt;放置好了就用cmd在该路径建站，输入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>这样完成之后，指定的文件夹中会出现以下内容</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><blockquote><p>_config.yml是网站的配置信息，可在这里配置大部分参数</p><p>package.json是应用程序信息，一般无需改动</p><p>scaffolds是模板文件夹，改动这个的front-matter以后所有新建的post都会包含这部分</p><p>themes是主题文件夹，hexo会根据主题生成页面</p><p>source文件夹存一些页面，我们的博文会存在/source/_posts中</p></blockquote><p>点击这个查看hexo官网的详细描述<a href="https://hexo.io/zh-cn/docs/configuration">&gt;_&lt;</a></p><p>常用的hexo命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo g  <span class="hljs-regexp">//</span>生成网页<br>hexo s  <span class="hljs-regexp">//</span>预览网页<br>hexo d  <span class="hljs-regexp">//</span>上传部署<br>hexo new <span class="hljs-string">&quot;title&quot;</span> <span class="hljs-regexp">//</span>生成新文章<br></code></pre></td></tr></table></figure><h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><p>最基本的已经完成了，现在我们要做的就是发表一篇自己的博文：</p><p>​    我们博文要用markdown语法写成，可以选择简洁又舒服的<a href="https://www.typora.io/">typora</a>来进行编辑，编辑完成后就可以生成上传预览。</p>]]></content>
      
      
      <categories>
          
          <category> 乌七八糟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="2020/01/28/hello-world/"/>
      <url>2020/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><p>经过多重努力（<del>是我太菜</del>），用的是hexo的框架，大佬JerryC的butterfly主题，这个小玩意<del>终于</del>部分gudao好了，接下来的大学生活里就用记录些有趣的东西叭！</p><p> <img src="https://pic.downk.cc/item/5e30fc4d2fb38b8c3cdcb93d.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 乌七八糟 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
